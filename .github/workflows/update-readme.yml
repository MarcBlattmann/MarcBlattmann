name: Update README

on:
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Markscribe
        run: go install github.com/taciturnaxolotl/markscribe@latest

      - name: Generate README
        env:
          WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
        run: |
          # Fetch Hackatime data and create custom stats
          echo "Fetching Hackatime data..."
          export STATS=$(curl -s -H "Authorization: Bearer ${{ secrets.WAKATIME_API_KEY }}" \
                  "https://hackatime.hackclub.com/api/hackatime/v1/users/current/stats/last_7_days")
          
          echo "API Response received, processing..."
          
          # Replace the placeholder with actual stats
          python3 << 'EOF'
          import json
          import os
          
          # Read the API response
          stats_json = os.environ.get('STATS', '{}')
          print(f"Stats JSON length: {len(stats_json)}")
          
          try:
              data = json.loads(stats_json)
              languages = data.get('data', {}).get('languages', [])
              print(f"Found {len(languages)} languages")
              
              # Create language bars
              stats_content = "### 💻 Most Used Coding Languages (last 7 days)\n\n"
              
              for lang in languages[:5]:  # Top 5 languages
                  name = lang['name']
                  percent = lang['percent']
                  time_text = lang['text']
                  
                  # Create a better looking progress bar
                  filled = int(percent / 5)  # Scale to 20 chars max
                  empty = 20 - filled
                  bar = '█' * filled + '░' * empty
                  
                  # Format with proper spacing and emojis
                  if name == 'TypeScript':
                      emoji = '🔷'
                  elif name == 'JavaScript':
                      emoji = '🟨'
                  elif name == 'Python':
                      emoji = '🐍'
                  elif name == 'CSS':
                      emoji = '🎨'
                  elif name == 'HTML':
                      emoji = '🌐'
                  elif name == 'Java':
                      emoji = '☕'
                  elif name == 'C#':
                      emoji = '🔷'
                  elif name == 'YAML':
                      emoji = '⚙️'
                  elif name == 'Markdown':
                      emoji = '📝'
                  else:
                      emoji = '📄'
                  
                  # Ensure consistent alignment by padding language name to 12 characters
                  padded_name = f"{name:<12}"
                  stats_content += f"{emoji} **{padded_name}** ▐{bar}▌ {percent:4.1f}% ({time_text})  \n"
              
              print("Generated stats content:")
              print(stats_content)
              
              # Read template and replace placeholder
              with open('README.template.md', 'r') as f:
                  content = f.read()
              
              print("Original template content:")
              print(content)
              
              # Replace the placeholder
              old_placeholder = '### 💻 Most Used Coding Languages (last 7 days)\n\n*WakaTime stats will be added once API integration is resolved*'
              if old_placeholder in content:
                  content = content.replace(old_placeholder, stats_content.strip())
                  print("Placeholder found and replaced!")
              else:
                  print("Placeholder not found, appending stats...")
                  content += "\n\n" + stats_content.strip()
              
              # Write final README
              with open('README.md', 'w') as f:
                  f.write(content)
              
              print("README.md written successfully!")
                  
          except Exception as e:
              print(f"Error occurred: {e}")
              # Fallback: just copy template
              with open('README.template.md', 'r') as f:
                  content = f.read()
              with open('README.md', 'w') as f:
                  f.write(content.replace('*WakaTime stats will be added once API integration is resolved*', '*Unable to fetch coding stats*'))
          EOF

      - name: Commit and Push if Changed
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add README.md
          git diff --cached --quiet || git commit -m "chore: update README"
          git push
